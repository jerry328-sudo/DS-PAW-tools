import numpy as np
import os
from tkinter import filedialog
import tkinter as tk

# draw a button to select the file
root_win = tk.Tk()
root_win.title('as to POSCAR')
root_win.geometry('500x300')
root_win.resizable(width=False, height=False)
file_path = {'file': ''}
dir = {'dir': ''}
def select_file():
    file_path['file'] = filedialog.askopenfilename(filetypes=[('as file', '*.as')])
    m1.config(text=file_path['file'])
    return file_path['file']
def select_path():
    dir['dir'] = filedialog.askdirectory()
    m2.config(text=dir['dir'])
    return dir['dir']

button1 = tk.Button(root_win, text='select file', command=select_file)
button2 = tk.Button(root_win, text='save', command=select_path)

tk.Label(root_win, text='select file').grid(row=0, column=0)
tk.Label(root_win, text='save path').grid(row=1, column=0)

m1 = tk.Message(root_win, text=file_path['file'], width=300)
m1.grid(row=0, column=1,padx=10,pady=10)
m2 = tk.Message(root_win, text=dir['dir'], width=300)
m2.grid(row=1, column=1,padx=10,pady=10)

button1.grid(row=2, column=0, sticky='w', padx=10, pady=10)
button2.grid(row=2, column=1, sticky='w', padx=10, pady=10)

def tran_as_POSCAR(file_path, dir):

    with open(file_path, 'r') as f:
        I = f.readlines()
    
    os.chdir(dir)

    # Determine whether the file folder exists
    if not os.path.exists('vaspfiles'):

        # make a new directory in the current directory
        os.mkdir(dir + '/vaspfiles')

        # set the work path as the new directory
        os.chdir(dir + '/vaspfiles')
    else:
        os.chdir(dir + '/vaspfiles')


    def tran(fix):
        if fix == 'T':
            return 'F'
        else:
            return 'T'


    with open('POSCAR', 'w') as f:
        f.write('POSCAR generated by tran_as_POSCAR.py\n')
        f.write('1.0\n')
        len_I = len(I)

        for i in range(len_I):
            if 'atoms' in I[i]:
                a_tot = float(I[i+1].split()[0])
            if 'Lattice' in I[i]:
                al = I[i+1].split()
                al = ['%.16f' % float(x) for x in al[0:3]]
                bl = I[i+2].split()
                bl = ['%.16f' % float(x) for x in bl[0:3]]
                cl = I[i+3].split()
                cl = ['%.16f' % float(x) for x in cl[0:3]]
            if 'Cartesian' in I[i]:
                if 'Fix' in I[i]:
                    # It = I[i].split()
                    pos = {'atom': [], 'cart': [], 'Fix': []}
                    for j in range(i+1, i+1+int(a_tot)):
                        Ic = I[j].split()
                        pos['atom'].append(Ic[0])
                        pos['cart'].append(['%.16f' % float(x) for x in Ic[1:4]])
                        pos['Fix'].append([tran(x) for x in Ic[4:7]])
                else:
                    pos = {'atom': [], 'cart': []}
                    for j in range(i+1, i+1+int(a_tot)):
                        Ic = I[j].split()
                        pos['atom'].append(Ic[0])
                        pos['cart'].append(['%.16f' % float(x) for x in Ic[1:4]])

        f.write('%+22s' % al[0]+'%+22s' % al[1]+'%+22s' % al[2]+'\n')
        f.write('%+22s' % bl[0]+'%+22s' % bl[1]+'%+22s' % bl[2]+'\n')
        f.write('%+22s' % cl[0]+'%+22s' % cl[1]+'%+22s' % cl[2]+'\n')

        # Count the number of atoms in the order of 'pos' list
        atom_num = {}
        list_atom = []
        list_atom_value = []
        # count = -1
        count1 = -1
        for i in pos['atom']:
            # count += 1
            if i not in list_atom:
                crit = i
                count1 += 1
                list_atom.append(i)
                list_atom_value.append(1)
            elif i != crit: 
                crit = i
                count1 += 1
                list_atom.append(i)
                list_atom_value.append(1)
            else:
                list_atom_value[count1] += 1

        for i in list_atom:
            f.write('%+5s' % i)
        f.write('\n')
        for i in list_atom_value:
            f.write('%+6s' % i)
        f.write('\n')
        f.write('''Cartesian
    ''')
        if 'Fix' in pos:
            for i in range(len(pos['atom'])):
                f.write('%+20s' % pos['cart'][i][0]+'%+20s' % pos['cart'][i][1]+'%+20s' % pos['cart'][i]
                        [2]+'%+4s' % pos['Fix'][i][0]+'%+4s' % pos['Fix'][i][1]+'%+4s' % pos['Fix'][i][2]+'\n')
        else:
            for i in range(len(pos['atom'])):
                f.write('%+20s' % pos['cart'][i][0]+'%+20s' % pos['cart'][i][1]+'%+20s' % pos['cart'][i][2]+'\n')

# m3 = tk.Message(root_win, text=dir['dir'], width=300)
# m3.grid(row=3, column=0,padx=10,pady=10)

# make a button to start the calculation
button3 = tk.Button(root_win, text='tran', command=lambda: tran_as_POSCAR(file_path['file'], dir['dir']))
button3.grid(row=3, column=0, sticky='w', padx=10, pady=10)


root_win.mainloop()